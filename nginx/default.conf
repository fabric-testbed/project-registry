server {
    listen 80;
    return 301 https://$host:8443$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $host;

    ssl_certificate /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;

    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
        # forward the /validate request to Vouch Proxy
        proxy_pass http://vouch-proxy:9090/validate;

        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        ### AUTH REQUEST SET ###
        # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
        #auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
        # CILogon openid claims
        #auth_request_set $auth_resp_x_vouch_idp_claims_sub $upstream_http_x_vouch_idp_claims_sub;
        #auth_request_set $auth_resp_x_vouch_idp_claims_iss $upstream_http_x_vouch_idp_claims_iss;
        #auth_request_set $auth_resp_x_vouch_idp_claims_aud $upstream_http_x_vouch_idp_claims_aud;
        #auth_request_set $auth_resp_x_vouch_idp_claims_token_id $upstream_http_x_vouch_idp_claims_token_id;

        # CILogon email claim
        #auth_request_set $auth_resp_x_vouch_idp_claims_email $upstream_http_x_vouch_idp_claims_email;

        # CILogon profile claims
        #auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
        #auth_request_set $auth_resp_x_vouch_idp_claims_family_name $upstream_http_x_vouch_idp_claims_family_name;
        #auth_request_set $auth_resp_x_vouch_idp_claims_name $upstream_http_x_vouch_idp_claims_name;

        # optinally add X-Vouch-IdP-IdToken, X-Vouch-IdP-AccessToken or X-Vouch-IdP-RefreshToken
        auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;
        #auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
        #auth_request_set $auth_resp_x_vouch_idp_refreshtoken $upstream_http_x_vouch_idp_refreshtoken;

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 http://$host:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
    }

    # proxy pass authorized requests to your service
    location / {
        # CORS
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset = utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range';
        }
        if ($request_method = 'GET') {
            add_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range';
        }
        if ($request_method = 'PUT') {
            add_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range';
        }
        if ($request_method = 'DELETE') {
            add_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range';
        }
        # forward authorized requests to your service protectedapp.yourdomain.com
        ### macOS development (IP from )
        proxy_pass http://192.168.65.2:5000/;
        ### docker-compose deployment
        #proxy_pass http://api-server:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        ### AUTH REQUEST SET ###
        # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
        #auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # CILogon openid claims
        #auth_request_set $auth_resp_x_vouch_idp_claims_sub $upstream_http_x_vouch_idp_claims_sub;
        #auth_request_set $auth_resp_x_vouch_idp_claims_iss $upstream_http_x_vouch_idp_claims_iss;
        #auth_request_set $auth_resp_x_vouch_idp_claims_aud $upstream_http_x_vouch_idp_claims_aud;
        #auth_request_set $auth_resp_x_vouch_idp_claims_token_id $upstream_http_x_vouch_idp_claims_token_id;

        # CILogon email claim
        #auth_request_set $auth_resp_x_vouch_idp_claims_email $upstream_http_x_vouch_idp_claims_email;

        # CILogon profile claims
        #auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
        #auth_request_set $auth_resp_x_vouch_idp_claims_family_name $upstream_http_x_vouch_idp_claims_family_name;
        #auth_request_set $auth_resp_x_vouch_idp_claims_name $upstream_http_x_vouch_idp_claims_name;

        # optinally add X-Vouch-IdP-IdToken, X-Vouch-IdP-AccessToken or X-Vouch-IdP-RefreshToken
        auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;
        #auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
        #auth_request_set $auth_resp_x_vouch_idp_refreshtoken $upstream_http_x_vouch_idp_refreshtoken;

        ### PROXY SET HEADER ###
        # optionally pass any custom claims you are tracking
        # set user header (usually an email)
        #proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;

        # CILogon openid claims
        #proxy_set_header X-Vouch-IdP-Claims-Sub $auth_resp_x_vouch_idp_claims_sub;
        #proxy_set_header X-Vouch-IdP-Claims-Iss $auth_resp_x_vouch_idp_claims_iss;
        #proxy_set_header X-Vouch-IdP-Claims-Aud $auth_resp_x_vouch_idp_claims_aud;
        #proxy_set_header X-Vouch-IdP-Claims-Token_Id $auth_resp_x_vouch_idp_claims_token_id;

        # CILogon email claim
        #proxy_set_header X-Vouch-IdP-Claims-Email $auth_resp_x_vouch_idp_claims_email;

        # CILogon profile claims
        #proxy_set_header X-Vouch-IdP-Claims-Given_Name $auth_resp_x_vouch_idp_claims_given_name;
        #proxy_set_header X-Vouch-IdP-Claims-Family_Name $auth_resp_x_vouch_idp_claims_family_name;
        #proxy_set_header X-Vouch-IdP-Claims-Name $auth_resp_x_vouch_idp_claims_name;

        # optionally pass the idtoken, accesstoken or refreshtoken
        #add_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
        #add_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;
        #add_header X-Vouch-IdP-RefreshToken $auth_resp_x_vouch_idp_refreshtoken;
    }
}
