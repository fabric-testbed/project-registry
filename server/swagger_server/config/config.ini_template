; comanage-api - API Username / Key for COmanage API
[comanage-api]
api_key = co_api_key
api_username = co_api_username
api_coid = co_coid
empty_parent_flag = -1

; default-user - Default user settings for when user credentials are not found in the header
[default-user]
co_person_id = 0
co_status = Active
email = anonymous@fabric-testbed.net
name = anonymous user
oidc_claim_sub = http://cilogon.org/serverA/users/000000
; roles must be space delimited if providing more than one
; options = fabric-active-users, project-leads, facility-operators
roles = fabric-active-users
uuid = 00000000-0000-0000-0000-000000000000

; cou - COmanaage non-project COUs for authorization checks
[fabric-cou]
fabric_active_users = fabric-active-users
facility_operators = facility-operators
project_leads = project-leads

; mock - Mock data flags
[mock]
; True = use mock api calls to COmanage (does not create real groups)
comanage_api = True
; True = use mock data instead of data found in COmanage
data = True
; mock data files - representative of COmanage API JSON response files
mock_co_people = mock_data/co_people.json
mock_co_person_roles = mock_data/co_person_roles.json
mock_cous = mock_data/cous.json
mock_email_addresses = mock_data/email_addresses.json
mock_names = mock_data/names.json
; True = use mock api calls to User Information Service (generates UUID values for users)
uis_api = True

; postgres - PostgreSQL database settings
[postgres]
database = postgres
; use for docker based server
host = database
; use for locally running server
;host = 127.0.0.1
password = registry
port = 5432
user = postgres

; uis - User Information Service settings
[uis]
; Cookie name
cookie_name = fabric-service
; Cookie domain
cookie_domain = uis_cookie_domain
; API URL
api_url = uis_api_url
; API port
api_port = uis_port
; SSL verify - Verify SSL certificate (set to False for self-signed certs)
ssl_verify = False

; uwsgi - uWSGI settings
[uwsgi]
; documentation: http://uwsgi-docs.readthedocs.io/en/latest/Options.html
; http request buffer size (default is 4096)
buffer-size = 32768
; chdir to specified directory before apps loading
chdir = ./
; chmod-socket ... with appropriate permissions - may be needed **socket**
;chmod-socket        = 666
; exit instead of brutal reload on SIGTERM (no more needed)
die-on-term = true
; add an http router/server on the specified address **port**
;http                = :8000
; automatically transform output to chunked encoding during HTTP 1.1 keepalive
;http-auto-chunked = true
; HTTP 1.1 keepalive support (non-pipelined) requests
;http-keepalive = true
; load apps in each worker instead of the master
;lazy-apps = true
; prefix logs with date or a strftime string
;log-date = true
; enable master process
master = true
; reload workers after the specified amount of managed requests
max-requests = 5000
; load Flask's WSGI file/module
module = wsgi:app
; enable post buffering
;post-buffering = true
; spawn the specified number of workers/processes
processes = 2
; force the specified protocol for default sockets
protocol = http
; bind to the specified UNIX/TCP socket using default protocol
socket = :5000
; map mountpoint to static directory (or file) **port**
;static-map          = /static/=static/
;static-map          = /media/=media/
; run each worker in prethreaded mode with the specified number of threads
threads = 2
; bind to the specified UNIX/TCP socket using uwsgi protocol (full path) **socket**
;uwsgi-socket        = ./base.sock
; try to remove all of the generated file/sockets
vacuum = true
; set PYTHONHOME/virtualenv (full path)
;virtualenv          = ./venv ;;; now set in run_uwsgi script
; strategy for allocating/deallocating the WSGI env
;wsgi-env-behavior = holy
