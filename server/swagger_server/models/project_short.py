# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProjectShort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, name: str=None, description: str=None, facility: str=None):  # noqa: E501
        """ProjectShort - a model defined in Swagger

        :param uuid: The uuid of this ProjectShort.  # noqa: E501
        :type uuid: str
        :param name: The name of this ProjectShort.  # noqa: E501
        :type name: str
        :param description: The description of this ProjectShort.  # noqa: E501
        :type description: str
        :param facility: The facility of this ProjectShort.  # noqa: E501
        :type facility: str
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'description': str,
            'facility': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'description': 'description',
            'facility': 'facility'
        }
        self._uuid = uuid
        self._name = name
        self._description = description
        self._facility = facility

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectShort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project_short of this ProjectShort.  # noqa: E501
        :rtype: ProjectShort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ProjectShort.


        :return: The uuid of this ProjectShort.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ProjectShort.


        :param uuid: The uuid of this ProjectShort.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this ProjectShort.


        :return: The name of this ProjectShort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectShort.


        :param name: The name of this ProjectShort.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ProjectShort.


        :return: The description of this ProjectShort.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProjectShort.


        :param description: The description of this ProjectShort.
        :type description: str
        """

        self._description = description

    @property
    def facility(self) -> str:
        """Gets the facility of this ProjectShort.


        :return: The facility of this ProjectShort.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility: str):
        """Sets the facility of this ProjectShort.


        :param facility: The facility of this ProjectShort.
        :type facility: str
        """

        self._facility = facility
