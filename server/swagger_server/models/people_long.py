# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PeopleLong(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, cilogon_id: str=None, name: str=None, email: str=None, eppn: str=None, roles: List[str]=None, projects: List[str]=None):  # noqa: E501
        """PeopleLong - a model defined in Swagger

        :param uuid: The uuid of this PeopleLong.  # noqa: E501
        :type uuid: str
        :param cilogon_id: The cilogon_id of this PeopleLong.  # noqa: E501
        :type cilogon_id: str
        :param name: The name of this PeopleLong.  # noqa: E501
        :type name: str
        :param email: The email of this PeopleLong.  # noqa: E501
        :type email: str
        :param eppn: The eppn of this PeopleLong.  # noqa: E501
        :type eppn: str
        :param roles: The roles of this PeopleLong.  # noqa: E501
        :type roles: List[str]
        :param projects: The projects of this PeopleLong.  # noqa: E501
        :type projects: List[str]
        """
        self.swagger_types = {
            'uuid': str,
            'cilogon_id': str,
            'name': str,
            'email': str,
            'eppn': str,
            'roles': List[str],
            'projects': List[str]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'cilogon_id': 'cilogon_id',
            'name': 'name',
            'email': 'email',
            'eppn': 'eppn',
            'roles': 'roles',
            'projects': 'projects'
        }
        self._uuid = uuid
        self._cilogon_id = cilogon_id
        self._name = name
        self._email = email
        self._eppn = eppn
        self._roles = roles
        self._projects = projects

    @classmethod
    def from_dict(cls, dikt) -> 'PeopleLong':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The People_long of this PeopleLong.  # noqa: E501
        :rtype: PeopleLong
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this PeopleLong.


        :return: The uuid of this PeopleLong.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this PeopleLong.


        :param uuid: The uuid of this PeopleLong.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def cilogon_id(self) -> str:
        """Gets the cilogon_id of this PeopleLong.


        :return: The cilogon_id of this PeopleLong.
        :rtype: str
        """
        return self._cilogon_id

    @cilogon_id.setter
    def cilogon_id(self, cilogon_id: str):
        """Sets the cilogon_id of this PeopleLong.


        :param cilogon_id: The cilogon_id of this PeopleLong.
        :type cilogon_id: str
        """

        self._cilogon_id = cilogon_id

    @property
    def name(self) -> str:
        """Gets the name of this PeopleLong.


        :return: The name of this PeopleLong.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PeopleLong.


        :param name: The name of this PeopleLong.
        :type name: str
        """

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this PeopleLong.


        :return: The email of this PeopleLong.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this PeopleLong.


        :param email: The email of this PeopleLong.
        :type email: str
        """

        self._email = email

    @property
    def eppn(self) -> str:
        """Gets the eppn of this PeopleLong.


        :return: The eppn of this PeopleLong.
        :rtype: str
        """
        return self._eppn

    @eppn.setter
    def eppn(self, eppn: str):
        """Sets the eppn of this PeopleLong.


        :param eppn: The eppn of this PeopleLong.
        :type eppn: str
        """

        self._eppn = eppn

    @property
    def roles(self) -> List[str]:
        """Gets the roles of this PeopleLong.


        :return: The roles of this PeopleLong.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[str]):
        """Sets the roles of this PeopleLong.


        :param roles: The roles of this PeopleLong.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def projects(self) -> List[str]:
        """Gets the projects of this PeopleLong.


        :return: The projects of this PeopleLong.
        :rtype: List[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: List[str]):
        """Sets the projects of this PeopleLong.


        :param projects: The projects of this PeopleLong.
        :type projects: List[str]
        """

        self._projects = projects
